Without optimization

running external 1 args = 10000 2500
3.64u 0.00s 0:03.64
running external 2 args = 10000 5000
7.16u 0.00s 0:07.17
running external 3 args = 15000 2500
5.50u 0.01s 0:05.52
running external 4 args = 15000 5000
10.91u 0.00s 0:10.9

running internal 1 args = 10000 2500
1.71u 0.00s 0:01.72
running internal 2 args = 10000 5000
3.50u 0.00s 0:03.51
running internal 3 args = 15000 2500
2.64u 0.00s 0:02.65
running internal 4 args = 15000 5000
5.23u 0.01s 0:05.24

With optimization

running external 1 args = 10000 2500
2.30u 0.00s 0:02.30
running external 2 args = 10000 5000
10.82u 0.00s 0:10.83
running external 3 args = 15000 2500
3.49u 0.00s 0:03.50
running external 4 args = 15000 5000
6.96u 0.01s 0:06.97

running internal 1 args = 10000 2500
1.68u 0.00s 0:01.69
running internal 2 args = 10000 5000
3.33u 0.02s 0:03.35
running internal 3 args = 15000 2500
2.53u 0.01s 0:02.54
running internal 4 args = 15000 5000
5.06u 0.02s 0:05.08

Part (b):
The internal version is a bit more than twice as fast as the external version. This is because it takes time for the
string to be retrieved, rebuilt and modified in external, instead of using the int buffer which takes less time.

Part (c): 
On average, the programs (both internal and external) run faster than their unoptimized counterparts when compiler 
optimization is used. Between the internal and external version, it is still the same with the internal version being
faster than the external version, only that this time, the ratio of timings between the 2 versions is not as linear 
as the 2 versions in the optimized program.





